#!/usr/bin/python3

import os
from multiprocessing import Pool, cpu_count
from time import sleep
from typing import Tuple

from core.client.AtCoderClient import AtCoderClient, Contest
from core.format_prediction.FormatPredictor import FormatPredictor
from core.models.Problem import Problem
from templates.cpp.cpp_code_generator import CppCodeGenerator


def prepare_procedure(argv: Tuple[AtCoderClient, Problem]):
    client, problem = argv

    pid, url = problem.get_alphabet(), problem.get_url()

    # Fetch data
    try:
        content = client.download_problem_content(problem)
    except Exception as e:
        print("Problem {}: failed to get the input format/samples".format(pid))
        raise e

    if len(content.get_samples()) == 0:
        print("Problem {}: no samples".format(pid))

    # Analyze input format
    try:
        result = FormatPredictor().predict(content)
        print(result)
    except Exception as e:
        result = None
        print("Problem {}: failed to analyze input format. {}".format(pid, e))

    dirname = "workspace/{}/{}".format(problem.get_contest().get_id(), pid)
    os.makedirs(dirname, exist_ok=True)
    solution_name = "{}/{}.cpp".format(dirname, pid)

    # If there is an existing code, just create backup
    if os.path.exists(solution_name):
        backup_id = 1
        while True:
            backup_name = "%s.%d" % (solution_name, backup_id)
            if not os.path.exists(backup_name):
                os.system('cp "%s" "%s"' % (solution_name, backup_name))
                break
            backup_id += 1

    # Store autogenerated code

    with open("{dir}/template.cpp".format(dir=mydir), "r") as f:
        template = f.read()

    with open(solution_name, "w") as f:
        f.write(CppCodeGenerator().generate_code(template, prediction_result))

    # Store samples
    for num, sample in enumerate(content.get_samples()):
        case_name = "%s_%d" % (pid, num + 1)
        infile = "%s/in_%s.txt" % (dirname, case_name)
        outfile = "%s/out_%s.txt" % (dirname, case_name)
        with open(infile, "w") as file:
            file.write(sample.get_input())
        with open(outfile, "w") as file:
            file.write(sample.get_output())

    print("prepared {}!".format(pid))


def prepare_workspace(atcoder_client: AtCoderClient, contest_id: str):
    while True:
        problem_list = atcoder_client.download_problem_list(Contest(contest_id=contest_id))
        if problem_list:
            break
        sleep(1.5)
        print("retrying to get task list.")

    thread_pool = Pool(processes=cpu_count())
    thread_pool.map(prepare_procedure, [(atcoder_client, problem) for problem in problem_list])


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("contest_id",
                        help="contest ID")
    parser.add_argument("--without-login",
                        action="store_true",
                        help="download testdata without login")
    args = parser.parse_args()

    try:
        import AccountInformation
    except ImportError:
        class AccountInformation:
            username = None
            password = None

    atcoder_client = AtCoderClient()
    if not args.without_login:
        atcoder_client.login(AccountInformation.username, AccountInformation.password)

    prepare_workspace(atcoder_client, args.contest_id)
