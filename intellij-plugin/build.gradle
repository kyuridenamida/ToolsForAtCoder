buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.15"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'jacoco'

group 'atcodertools'
version '0.1-SNAPSHOT'

ext.ideaApiVersion = '2019.3.1'
ext.clionApiVersion = '2019.3.2'

intellij {
    def optionalPlugins = [
            'com.intellij.testGuiFramework:193.SNAPSHOT.1@nightly',  // https://plugins.jetbrains.com/plugin/11114-test-gui-framework/versions
    ]

    if (System.getProperty("idea.atcodertools.intellij.runInCLion") == "true") {
        type = 'CL'  // CLion.
        version project.ext.clionApiVersion
    } else {
        type = 'IC'  // IntelliJ community edition (IDEA).
        version project.ext.ideaApiVersion
        optionalPlugins << 'java'
    }

    plugins = optionalPlugins
}

configurations {
    intelliJApi
}

dependencies {
    // Artifact names can be looked up from
    // https://github.com/JetBrains/gradle-intellij-plugin/blob/master/src/main/groovy/org/jetbrains/intellij/dependency/IdeaDependencyManager.groovy
    intelliJApi "com.jetbrains.intellij.idea:ideaIC:${project.ext.ideaApiVersion}"
    intelliJApi "com.jetbrains.intellij.clion:clion:${project.ext.clionApiVersion}"
}

task extractIntelliJApi(type: Sync) {
    dependsOn configurations.intelliJApi

    from {
        configurations.intelliJApi.collect {
            zipTree(it).matching {
                include 'lib/**/*.jar'
                include 'plugins/java/lib/**/*.jar'
                includeEmptyDirs false
            }
        }
    }

    into "$buildDir/intelliJApi/"
}

compileJava.dependsOn(extractIntelliJApi)
compileKotlin.dependsOn(extractIntelliJApi)

if (System.getProperty("idea.atcodertools.intellij.runInCLion") == "true") {
    sourceSets {
        test {
            java {
                exclude 'atcodertools/intellij/idea/**'
            }
        }
    }
} else {
    sourceSets {
        test {
            java {
                exclude 'atcodertools/intellij/clion/**'
            }
        }
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compileOnly fileTree("$buildDir/intelliJApi")
    testCompileOnly fileTree("$buildDir/intelliJApi")
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:1.0'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.0'
}

task testsJar(type: Jar, dependsOn: [classes, testClasses]) {
    archiveClassifier.set('tests')
    from sourceSets.test.output
}

def removeIntelliJApiFromPluginLib() {
    def jarsToBeDeleted = fileTree("$buildDir/intelliJApi").toSet().collect {
        it.name
    }
    fileTree("${project.intellij.sandboxDirectory}/plugins/${project.intellij.pluginName}/lib").matching {
        include jarsToBeDeleted
    }.toSet().forEach {
        it.delete()
    }
    fileTree("${project.intellij.sandboxDirectory}/plugins-test/${project.intellij.pluginName}/lib").matching {
        include jarsToBeDeleted
    }.toSet().forEach {
        it.delete()
    }
}

prepareSandbox {
    from(testsJar) {
        into "$pluginName/lib"
    }
    doLast {
        removeIntelliJApiFromPluginLib()
    }
}

prepareTestingSandbox {
    from(testsJar) {
        into "$pluginName/lib"
    }
    doLast {
        removeIntelliJApiFromPluginLib()
    }
}

runIde {
    if (System.getProperty("idea.gui.tests.gradle.runner") == "true") {
        def ideaSysProps = System.properties.findAll {
            def key = it.key as String
            key.startsWithAny("idea", "jb", "atcodertools")
        }
        ideaSysProps.remove("idea.home.path")
        ideaSysProps.remove("jb.vmOptionsFile")
        ideaSysProps.remove("idea.version")
        ideaSysProps.remove("idea.platform.prefix")
        ideaSysProps.put("atcodertools.intellij.common.command.noLogin", true)
        systemProperties ideaSysProps

        /* Need to split the space-delimited value in the exec.args */
        args System.getProperty("exec.args", "").split(",")
    }

    jacoco.applyTo(runIde)
    jacoco {
        includeNoLocationClasses = true
        includes = ["atcodertools.*"]
    }
}

test {
    def ideaSysProps = System.properties.findAll {
        def key = it.key as String
        key.startsWithAny("idea", "jb", "atcodertools")
    }
    ideaSysProps.remove("idea.home.path")
    ideaSysProps.remove("jb.vmOptionsFile")
    ideaSysProps.remove("idea.version")
    ideaSysProps.remove("idea.platform.prefix")
    ideaSysProps.put("idea.gui.tests.gradle.runner", true) // Use Gradle Launcher to run GUI tests
    ideaSysProps.put("idea.debug.mode", false) // Set true to enable debugging with breakpoints
    ideaSysProps.put("atcodertools.intellij.common.command.noLogin", true)
    systemProperties ideaSysProps

    filter {
        // Exclude uitest/testcase package because they are included in UiTestSuite.
        // If we don't exclude them here they will be executed twice.
        // Note that GuiTestCase needs to be wrapped by GuiTestSuite because it doesn't shutdown IDE
        // after the test execution resulted in timeout exception.
        excludeTestsMatching "atcodertools.intellij.uitest.testcase.*"
    }

    jacoco {
        includeNoLocationClasses = true
        includes = ["atcodertools.*"]
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.enabled true
        html.enabled true
    }
    executionData(test, runIde)
}

check.dependsOn jacocoTestReport